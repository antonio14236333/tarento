// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model Student {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  fullName      String
  educationLevel String?
  careerStatus  String?
  skills        Json?         
  experience    Json?         
  education     Json?        
  location      String?
  createdAt     DateTime      @default(now())
  lastActive    DateTime      @updatedAt
  profileStatus String        @default("INCOMPLETE") // INCOMPLETE, COMPLETE, VERIFIED
  

  resumes       Resume[]
  applications  Application[]
  jobMatches    JobMatch[]
  interviews    Interview[]

  @@map("students")
}

model Employer {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  companyName       String
  industry          String?
  companySize       String?
  companyDescription String?
  location          String?
  verified          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  lastActive        DateTime  @updatedAt


  jobs              Job[]

  @@map("employers")
}


model Job {
  id              String    @id @default(uuid())
  employerId      String
  title           String
  description     String    @db.Text
  requiredSkills  Json?     
  requirements    Json?    
  jobType         String?
  location        String?
  salaryRange     String?
  startDate       DateTime?
  status          String    @default("OPEN") // OPEN, CLOSED, DRAFT
  postedAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
 
  employer        Employer     @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications    Application[]
  jobMatches      JobMatch[]

  @@map("jobs")
}

// Hola compadre, este codigo solo yo y dios sabemos que hace
// pero si funciona no lo toques, gracias

// btw, el fileUrl es opcional, pero si tienes que escalarlo tienes que usar multer 

model Resume {
  id            String    @id @default(uuid())
  studentId     String
  fileUrl       String?
  pdf           Bytes 
  extractedData Json?     
  parsedSkills  Json?     
  parsedExperience Json?  
  parsedEducation Json?   
  uploadedAt    DateTime  @default(now())
  processed     Boolean   @default(false)
  

  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("resumes")
}


model JobMatch {
  id                String    @id @default(uuid())
  studentId         String
  jobId             String
  totalMatchScore   Float
  skillMatches      Json?     
  requirementMatches Json?    
  isHighlighted     Boolean   @default(false)
  calculatedAt      DateTime  @default(now())
  
 
  student          Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  job              Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_matches")
  @@index([studentId, jobId])
  @@index([totalMatchScore])
}

model Application {
  id            String    @id @default(uuid())
  studentId     String
  jobId         String
  status        String    @default("PENDING") // PENDING, REVIEWED, ACCEPTED, REJECTED
  coverLetter   Json?     
  matchScore    Float?
  appliedAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
 
  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("applications")
  @@index([studentId, jobId])
  @@index([status])
}

model Interview {
  id            String    @id @default(uuid())
  studentId     String
  scheduledAt   DateTime
  status        String    @default("PENDING") // PENDING, COMPLETED, CANCELLED
  notes         Json?    
  
 
  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("interviews")
}